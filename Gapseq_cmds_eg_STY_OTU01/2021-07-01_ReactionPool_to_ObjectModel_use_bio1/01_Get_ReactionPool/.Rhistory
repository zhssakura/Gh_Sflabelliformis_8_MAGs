############ Read RDS files:############
# MacOS
getwd()
############ Read RDS files:############
# MacOS
getwd <- getwd()
getwd
?order()
library(sybil)
library(lattice)
library(ReacTran)
library(rootSolve)
library(deSolve)
library(shape)
library(sybil)
library(Matrix)
library(BacArena)
############ ############ ############
## 050.What are the active reactions which use or produce a certain compound in ******your_model****:
# this will give a new column called 'sol$fluxes' with the same length to the 'reaction id', which shows fluxes of each reaction.
?optimizeProb
############ Read RDS files:############
# MacOS
# Assigning Directory as a Variable in R
getwd <- getwd()
getwd
?addReact
?rmReact()
?addReact() # sybil function: The function rmReact removes reactions from a model.
?addReact # sybil function: The function rmReact removes reactions from a model.
?addReact # sybil function: The function rmReact removes reactions from a model.
############
library(lattice)
library(ReacTran)
library(rootSolve)
library(deSolve)
library(shape)
library(sybil)
library(Matrix)
library(BacArena)
getwd = '/Users/zzfanyi/Bioinfo/EMP500/02-shotgun/GapSeq_models/STY_models/GapSeq_Stylissa_20200407_MergedSuperGenomes_MetaC_kegg_seed_GapSeqv0405_Diet_TT_sw_lALL_b_archaea_uncon_phototest/OTU02_renamed/20220423_diet_Jo_photo_nitrate/'
STYtaxon_2_con='STY_Merged_OTU02.RDS'
model2_con <- readRDS(paste(getwd,STYtaxon_2_con,sep = ""))
get_ALL_rxn <- function(mod, met){sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
for (i in as.list(met.idx)){
print(i)
}
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
for (i in as.list(met.idx)){
rxn.idx <- which(mod@S[i,]!=0)       # get the index of reaction(s) in which target metabolite is not =0 from the original stoichiomatric matrix 'mod@S'.
printReaction(mod, react=rxn.idx)            # get the reactions in the model by providing index in the original toichiomatric matrix.
}
}
get_ALL_rxn <- function(mod, met){sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
for (i in as.list(met.idx)){
print(i)
}
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
for (i in as.list(met.idx)){
rxn.idx <- which(mod@S[i,]!=0)       # get the index of reaction(s) in which target metabolite is not =0 from the original stoichiomatric matrix 'mod@S'.
printReaction(mod, react=rxn.idx)            # get the reactions in the model by providing index in the original toichiomatric matrix.
}
}
smatrix
get_ALL_rxn <- function(mod, met){sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
for (i in as.list(met.idx)){
print(i)
}
get_ALL_rxn <- function(mod, met){sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
for (i in as.list(met.idx)){
print(i)
}
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
for (i in as.list(met.idx)){
rxn.idx <- which(mod@S[i,]!=0)       # get the index of reaction(s) in which target metabolite is not =0 from the original stoichiomatric matrix 'mod@S'.
printReaction(mod, react=rxn.idx)            # get the reactions in the model by providing index in the original toichiomatric matrix.
}
}
q
}
get_ALL_rxn <- function(mod, met){sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
for (i in as.list(met.idx)){
print(i)
}
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
for (i in as.list(met.idx)){
rxn.idx <- which(mod@S[i,]!=0)       # get the index of reaction(s) in which target metabolite is not =0 from the original stoichiomatric matrix 'mod@S'.
printReaction(mod, react=rxn.idx)            # get the reactions in the model by providing index in the original toichiomatric matrix.
}
}
?get_ALL_rxn
??get_ALL_rxn
mod@S
met = 'cpd00001'
mod = model2_con
dim(mod)
get_ALL_rxn(mod, met)
smatrix
mod@S
# 2008 x 2187 sparse Matrix of class "dgCMatrix"
str(mod@S)
mod@S
# 2008 x 620 sparse Matrix of class "dgCMatrix"
str(smatrix)
get_ALL_rxn <- function(mod, met){sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
for (i in as.list(met.idx)){
print(i)
}
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
# for (i in as.list(met.idx)){
#   rxn.idx <- which(mod@S[i,]!=0)              # get the index of reaction(s) in which target metabolite is not =0 from the original stoichiomatric matrix 'mod@S'.
#   printReaction(mod, react=rxn.idx)           # get the reactions in the model by providing index in the original toichiomatric matrix.
# }
}
met = 'cpd00001'
mod = model2_con
dim(mod)
get_ALL_rxn(mod, met)
####### Updates on 23/Apr/2020: example starts #######
# 048. Johannes: this is a function which returns all active reactions which use or produce a certain compound. can start with this and extend it according to the needs.
get_rxn <- function(mod, met){
sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (list of 7), which include fluxes of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
rxn.idx <- which(smatrix[met.idx,]!=0)       # get the index of reaction(s) in which target metabolite is not =0 from the stoichiomatric matrix 'smatrix'.
printReaction(mod, react=rxn.idx)            # get the reactions in the model by providing index in the original stoichiomatric matrix.
}
get_ALL_rxn <- function(mod, met){sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
for (i in as.list(met.idx)){
print(i)
}
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
for (i in as.list(met.idx)){
rxn.idx <- which(mod@S[i,]!=0)       # get the index of reaction(s) in which target metabolite is not =0 from the original stoichiomatric matrix 'mod@S'.
printReaction(mod, react=rxn.idx)            # get the reactions in the model by providing index in the original toichiomatric matrix.
}
}
## do FBA, use "cplexAPI" as lp solver. Get all lower bounds before
## solving the problem. After solving, perform a sensitivity
## analysis and retrieve the reduced costs
opt <- optimizeProb(Ec_core, solver = "cplexAPI",
prCmd = list(c("getColsLowBnds", "LP_PROB", "1:77")),
poCmd = list("sensitivityAnalysis",
c("getDjCPLEX", "LP_PROB@oobj@env", "LP_PROB@oobj@lp", "0", "react_num(Ec_core)-1")))
## load the example data set
data(Ec_core)
## run optimizeProb(), Ec_sf will be an object of ## class optsol_optimizeProb
Ec_sf <- optimizeProb(Ec_core)
## run optimizeProb(), Ec_sf will be a list
Ec_sf <- optimizeProb(Ec_core, retOptSol = FALSE)
optimizeProb(Ec_core, react = c("ATPM", "PFK"),
lb = c(3, -3), ub = c(5, 6))
## do FBA, perform sensitivity analysis after optimization
optimizeProb(Ec_core, poCmd = list("sensitivityAnalysis"))
## do FBA, write the problem object to file in lp-format
optimizeProb(Ec_core,
poCmd = list(c("writeProb", "LP_PROB", "'Ec_core.lp'", "'lp'")))
## do FBA, use "cplexAPI" as lp solver. Get all lower bounds before
## solving the problem. After solving, perform a sensitivity
## analysis and retrieve the reduced costs
opt <- optimizeProb(Ec_core, solver = "cplexAPI",
prCmd = list(c("getColsLowBnds", "LP_PROB", "1:77")),
poCmd = list("sensitivityAnalysis",
c("getDjCPLEX", "LP_PROB@oobj@env", "LP_PROB@oobj@lp", "0", "react_num(Ec_core)-1")))
## get lower bounds
preProc(opt)
## get results of sensitivity analysis
postProc(opt)
################################################### 2021-01-10 ###########################################################
####################################################################################
# Nitrosopumilus (OTU02) draft model:
getwd_OTU02_draft_con = '/Users/zzfanyi/Bioinfo/EMP500/02-shotgun/GapSeq_models/STY_models/GapSeq_Stylissa_20200301_MergedSuperGenomes_MetaC_GapSeqv20200206_Diet_1x2x3a_lALL_b_archaea_uncon/OTU02_renamed/'
OTU02_draft_v2.5.3_con = 'STY_Merged_OTU02-draft.RDS.rm_rxn08519.RDS'
model2_draft_v2.5.3_con = readRDS(paste(getwd_OTU02_draft_con,OTU02_draft_v2.5.3_con,sep = ""))
model2_draft_v2.5.3_con
# Print Columns of the Stoichiometric Matrix:
printReaction(model2_draft_v2.5.3_con,react = 'rxn00001_c0')
# abbreviation	equation
# rxn00001_c0	(1) cpd00001[c0] + (1) cpd00012[c0] --> (2) cpd00009[c0] + (1) cpd00067[c0]
printReaction(model2_draft_v2.5.3_con,react = 'rxn00001_c0')
getwd = '/Users/zzfanyi/Bioinfo/EMP500/02-shotgun/GapSeq_models/STY_models/GapSeq_v20200607_mergebin_gapseq_v0607_MKSdb_Diet_Jo_lALL_b_uncon/'
SCM1_model_Li_2018 = 'SCM1_model_Li_2018/SCM1_model_Li_2018.RDS'
printReaction(model_SCM1_Li2018,react = 'R00740')
getwd = '/Users/zzfanyi/Bioinfo/EMP500/02-shotgun/GapSeq_models/STY_models/GapSeq_v20200607_mergebin_gapseq_v0607_MKSdb_Diet_Jo_lALL_b_uncon/'
SCM1_model_Li_2018 = 'SCM1_model_Li_2018/SCM1_model_Li_2018.RDS'
model_model2_draft_v2.5.3_con = readRDS(paste(getwd,SCM1_model_Li_2018,sep = ""))
printReaction(model_model2_draft_v2.5.3_con,react = 'R00740')
############### get fluxes of constraint models during gap-filling ###############
# 050.What are the active reactions which use or produce a certain compound in ******model2_con****:
# example with Shan's comments
getwd = '/Users/zzfanyi/Bioinfo/EMP500/02-shotgun/GapSeq_models/STY_models/GapSeq_Stylissa_20200407_MergedSuperGenomes_MetaC_kegg_seed_GapSeqv0405_Diet_TT_sw_lALL_b_archaea_uncon_phototest/OTU02_renamed/20220423_diet_Jo_photo_nitrate/'
STYtaxon_2_con='STY_Merged_OTU02.RDS'
model2_con <- readRDS(paste(getwd,STYtaxon_2_con,sep = ""))
met = 'cpd00001'
mod = model2_con
dim(mod)
sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
model2_con_flux_list <- as.data.frame(sol$fluxes)
dim(model2_con_flux_list)
model2_con_flux_list
# smatrix
smatrix <- mod@S[,which(sol$fluxes!=0)]
smatrix
####### Updates on 23/Apr/2020: example starts #######
# 048. Johannes: this is a function which returns all active reactions which use or produce a certain compound. can start with this and extend it according to the needs.
get_rxn <- function(mod, met){
sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (list of 7), which include fluxes of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
rxn.idx <- which(smatrix[met.idx,]!=0)       # get the index of reaction(s) in which target metabolite is not =0 from the stoichiomatric matrix 'smatrix'.
printReaction(mod, react=rxn.idx)            # get the reactions in the model by providing index in the original stoichiomatric matrix.
}
############
library(lattice)
library(ReacTran)
library(rootSolve)
library(deSolve)
library(shape)
library(sybil)
library(Matrix)
library(BacArena)
####### Updates on 23/Apr/2020: example starts #######
# 048. Johannes: this is a function which returns all active reactions which use or produce a certain compound. can start with this and extend it according to the needs.
get_rxn <- function(mod, met){
sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (list of 7), which include fluxes of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
rxn.idx <- which(smatrix[met.idx,]!=0)       # get the index of reaction(s) in which target metabolite is not =0 from the stoichiomatric matrix 'smatrix'.
printReaction(mod, react=rxn.idx)            # get the reactions in the model by providing index in the original stoichiomatric matrix.
}
# example of this function in model by GapSeq_v0405 and onwards:
getwd = '/Users/zzfanyi/Bioinfo/EMP500/02-shotgun/GapSeq_models/STY_models/GapSeq_Stylissa_20200407_MergedSuperGenomes_MetaC_kegg_seed_GapSeqv0405_Diet_TT_sw_lALL_b_archaea_uncon_phototest/OTU02_renamed/20220423_diet_Jo_photo_nitrate/'
STYtaxon_2_con='STY_Merged_OTU02.RDS'
model2_con <- readRDS(paste(getwd,STYtaxon_2_con,sep = ""))
model2_con
aa <- get_rxn(model2_con, 'cpd00001') # example: all reactions tha using 'cpd00001' will be gaven.
# 049. Shan modified: Get ALL reactions (both active and non-active reactions) which use or produce a certain compound in ******model2_con****:
get_ALL_rxn <- function(mod, met)
{sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
for (i in as.list(met.idx)){
print(i)
}
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
for (i in as.list(met.idx)){
rxn.idx <- which(mod@S[i,]!=0)              # get the index of reaction(s) in which target metabolite is not =0 from the original stoichiomatric matrix 'mod@S'.
printReaction(mod, react=rxn.idx)           # get the reactions in the model by providing index in the original toichiomatric matrix.
}
}
############
library(lattice)
library(ReacTran)
library(rootSolve)
library(deSolve)
library(shape)
library(sybil)
library(Matrix)
library(BacArena)
getwd = '/Users/zzfanyi/Bioinfo/EMP500/02-shotgun/GapSeq_models/STY_models/GapSeq_Stylissa_20200407_MergedSuperGenomes_MetaC_kegg_seed_GapSeqv0405_Diet_TT_sw_lALL_b_archaea_uncon_phototest/OTU02_renamed/20220423_diet_Jo_photo_nitrate/'
STYtaxon_2_con='STY_Merged_OTU02.RDS'
model2_con <- readRDS(paste(getwd,STYtaxon_2_con,sep = ""))
# 049. Shan modified: Get ALL reactions (both active and non-active reactions) which use or produce a certain compound in ******model2_con****:
get_ALL_rxn <- function(mod, met)
{sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
for (i in as.list(met.idx)){
print(i)
}
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
for (i in as.list(met.idx)){
rxn.idx <- which(mod@S[i,]!=0)              # get the index of reaction(s) in which target metabolite is not =0 from the original stoichiomatric matrix 'mod@S'.
printReaction(mod, react=rxn.idx)           # get the reactions in the model by providing index in the original toichiomatric matrix.
}
}
# 048. Johannes: this is a function which returns all active reactions which use or produce a certain compound. can start with this and extend it according to the needs.
get_rxn <- function(mod, met){
sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (list of 7), which include fluxes of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
rxn.idx <- which(smatrix[met.idx,]!=0)       # get the index of reaction(s) in which target metabolite is not =0 from the stoichiomatric matrix 'smatrix'.
printReaction(mod, react=rxn.idx)            # get the reactions in the model by providing index in the original stoichiomatric matrix.
}
get_ALL_rxn(mod, met)
getwd = '/Users/zzfanyi/Bioinfo/EMP500/02-shotgun/GapSeq_models/STY_models/GapSeq_Stylissa_20200407_MergedSuperGenomes_MetaC_kegg_seed_GapSeqv0405_Diet_TT_sw_lALL_b_archaea_uncon_phototest/OTU02_renamed/20220423_diet_Jo_photo_nitrate/'
STYtaxon_2_con='STY_Merged_OTU02.RDS'
model2_con <- readRDS(paste(getwd,STYtaxon_2_con,sep = ""))
# 049. Shan modified: Get ALL reactions (both active and non-active reactions) which use or produce a certain compound in ******model2_con****:
get_ALL_rxn <- function(mod, met)
{sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
for (i in as.list(met.idx)){
print(i)
}
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
for (i in as.list(met.idx)){
rxn.idx <- which(mod@S[i,]!=0)              # get the index of reaction(s) in which target metabolite is not =0 from the original stoichiomatric matrix 'mod@S'.
printReaction(mod, react=rxn.idx)           # get the reactions in the model by providing index in the original toichiomatric matrix.
}
}
# 048. Johannes: this is a function which returns all active reactions which use or produce a certain compound. can start with this and extend it according to the needs.
get_rxn <- function(mod, met){
sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (list of 7), which include fluxes of 2187 reactions for this model.
smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
rxn.idx <- which(smatrix[met.idx,]!=0)       # get the index of reaction(s) in which target metabolite is not =0 from the stoichiomatric matrix 'smatrix'.
printReaction(mod, react=rxn.idx)            # get the reactions in the model by providing index in the original stoichiomatric matrix.
}
met = 'cpd00001'
mod = model2_con
dim(mod)
get_ALL_rxn(mod, met)
get_rxn(mod, met)
get_ALL_rxn(mod, met)
get_rxn(mod, met)
get_ALL_rxn(mod, met)
get_rxn(mod, met)
# 049. Shan modified: Get ALL reactions (both active and non-active reactions) which use or produce a certain compound in ******model2_con****:
get_ALL_rxn <- function(mod, met)
{sol <- sybil::optimizeProb(mod, retOptSol=F) # find a list (of 7,sol), which include flux info of 2187 reactions for this model.
# smatrix <- mod@S[,which(sol$fluxes!=0)]      # get reactions whose flux is not = 0 from the stoichiomatric matrix (mod@S) and generate a new matrix 'smatrix'. There are 620 such reactions with 2008 metabolites.
met.idx <- grep(met, mod@met_id)             # get the index of target metabolites from the original stoichiomatric matrix (1 and 1901).
for (i in as.list(met.idx)){
print(i)
}
print(paste("Active reactions that uses the metabolite", met, mod@met_name[met.idx])) #[1] "H2O-c0" "H2O-e0"
for (i in as.list(met.idx)){
rxn.idx <- which(mod@S[i,]!=0)              # get the index of reaction(s) in which target metabolite is not =0 from the original stoichiomatric matrix 'mod@S'.
printReaction(mod, react=rxn.idx)           # get the reactions in the model by providing index in the original toichiomatric matrix.
}
}
met = 'cpd00001'
mod = model2_con
dim(mod)
get_ALL_rxn(mod, met) # 736 reactions
